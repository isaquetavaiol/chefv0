// lib/admin.ts
export const ADMIN_EMAILS: string[] = [
  // Substitua pelo e‑mail do administrador (opcional, o bootstrap cobre o primeiro admin):
  "admin@exemplo.com",
]

export function isEmailAdmin(email: string) {
  if (!email) return false
  const list = process.env.ADMIN_EMAILS
    ? String(process.env.ADMIN_EMAILS)
        .split(",")
        .map((e) => e.toLowerCase().trim())
    : ADMIN_EMAILS.map((e) => e.toLowerCase().trim())
  return list.includes(email.toLowerCase().trim())
}

export function isAdminUser(u: { email?: string | null; app_metadata?: any }) {
  const emailOk = isEmailAdmin(u?.email || "")
  const meta = (u?.app_metadata || {}) as Record<string, any>
  const metaOk = meta.admin === true || meta.role === "admin"
  return emailOk || metaOk
}

// app/api/admin/pro/search/route.ts
import { NextResponse } from "next/server"
import { getAdminClient } from "@/lib/supabase/admin"
import { isAdminUser } from "@/lib/admin"

export async function GET(request: Request) {
  const { me } = await getAdminClient().auth.getUser()
  if (!isAdminUser(me.user)) return new NextResponse("Forbidden", { status: 403 })
  // ** rest of code here **
}

// app/api/admin/pro/assign/route.ts
import { NextResponse } from "next/server"
import { getAdminClient } from "@/lib/supabase/admin"
import { isAdminUser } from "@/lib/admin"

export async function POST(request: Request) {
  const { me } = await getAdminClient().auth.getUser()
  if (!isAdminUser(me.user)) return new NextResponse("Forbidden", { status: 403 })
  // ** rest of code here **
}

// app/admin/pro/page.tsx
import { useSession } from "@/hooks/use-session"
import { useEffect, useState } from "react"
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card"
import { ShieldOff } from 'lucide-react'
import { Button } from "@/components/ui/button"
import { toast } from "@/components/ui/use-toast"

const AdminProPage = () => {
  const { user, session } = useSession()
  const [plan, setPlan] = useState<"pro" | "freemium">("freemium")

  useEffect(() => {
    const p = (user?.app_metadata as any)?.plan as "pro" | "freemium" | undefined
    if (p && p !== plan) {
      setPlan(p as any)
    }
  }, [user, plan])

  const isAdmin = isAdminUser(user)

  if (!isAdmin) {
    async function bootstrapAdmin() {
      if (!session?.access_token) return
      try {
        const res = await fetch("/api/admin/bootstrap", {
          method: "POST",
          headers: { Authorization: `Bearer ${session.access_token}` },
        })
        if (!res.ok) throw new Error(await res.text())
        toast({ description: "Você agora é admin. Recarregando..." })
        setTimeout(() => window.location.reload(), 600)
      } catch (e: any) {
        toast({ variant: "destructive", description: e?.message || "Falha ao tornar admin." })
      }
    }

    return (
      <main className="mx-auto max-w-2xl p-6">
        <Card>
          <CardHeader>
            <CardTitle>Acesso restrito</CardTitle>
            <CardDescription>Esta página é exclusiva do administrador.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="flex items-center gap-2 text-sm text-muted-foreground">
              <ShieldOff className="size-4" />
              {user.email}
            </div>
            <div className="rounded-md border p-3">
              <p className="text-sm mb-2">
                Se este é o primeiro acesso, clique abaixo para se tornar administrador.
              </p>
              <Button onClick={bootstrapAdmin}>Tornar‑me admin</Button>
            </div>
          </CardContent>
        </Card>
      </main>
    )
  }

  return (
    <main className="mx-auto max-w-2xl p-6">
      <Card>
        <CardHeader>
          <CardTitle>Admin Pro</CardTitle>
          <CardDescription>Esta é a página exclusiva para administradores PRO.</CardDescription>
        </CardHeader>
        <CardContent>
          {/* ** rest of code here ** */}
        </CardContent>
      </Card>
    </main>
  )
}

export default AdminProPage

// app/page.tsx
import { useSession } from "@/hooks/use-session"
import { useEffect, useState } from "react"
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card"
import { ShieldOff } from 'lucide-react'
import { Button } from "@/components/ui/button"
import { toast } from "@/components/ui/use-toast"

const HomePage = () => {
  const { user, session } = useSession()
  const [plan, setPlan] = useState<"pro" | "freemium">("freemium")

  useEffect(() => {
    const p = (user?.app_metadata as any)?.plan as "pro" | "freemium" | undefined
    if (p && p !== plan) {
      setPlan(p as any)
    }
  }, [user, plan])

  return (
    <main className="mx-auto max-w-2xl p-6">
      <Card>
        <CardHeader>
          <CardTitle>Bem-vindo</CardTitle>
          <CardDescription>Olá, {user.email}!</CardDescription>
        </CardHeader>
        <CardContent>
          {/* ** rest of code here ** */}
        </CardContent>
      </Card>
    </main>
  )
}

export default HomePage
